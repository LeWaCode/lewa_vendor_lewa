<?xml version="1.0" encoding="UTF-8"?>

<!-- byread Package Utility Author: Jojol Zhou Date: 20100804 -->
<project name="LWH" default="release-guarded"><!--compile -->
	
	<!-- 自定义地区  Begin-->
		<!-- java jdk & android sdk 环境 -->
		<property name="sdk-folder" value="E:\AndroidSDK2.3-Eclipse3.6.2\android-sdk-windows" />
		<property name="jdk-folder" value='C:\Program Files\Java\jdk1.6.0_10' />
		<!-- 签名私钥设置 -->
		<property name="keystore-path" value="E:\workspace\LewaKeys\lwkeyTest.keys" />
		<property name="store-alias" value="lwhkey" />
		<property name="store-pass" value="123456" />
		<property name="key-pass" value="123456" />
	<!-- End -->
	<property name="sdk2.3-folder" value="${sdk-folder}\platforms\android-10" />
	<property name="sdk-tools" value="${sdk-folder}/platform-tools" />
	<property name="android-tools" value="${sdk-folder}/tools" />
	<property name="proguardpath" location="${android-tools}/proguard/lib" />



	<!-- step 1.generate R.java by aapt 2.compile java to class by javac。exe 
		3.generate classes.dex by dx.bat -->
	<!-- 4.package resources by aapt 5. package resource and classes.dex by 
		apkbuilder.bat 6.sign apk by jarsinger -->
	<!-- Tools -->
	<property name="aapt" value="${sdk-tools}/aapt.exe" />
	<property name="dx" value="${sdk-tools}/dx.bat" />
	<property name="apk-builder" value="${android-tools}/apkbuilder.bat" />
	<property name="aidl" value="${sdk-tools}/aidl.exe" />
	<property name="adb" value="${sdk-tools}/adb.exe" />
	<property name="android-jar" value="${sdk2.3-folder}/android.jar" />
	<property name="jarsigner" value="${jdk-folder}\bin\jarsigner.exe" />

	<!-- Application Package Name -->
	<property name="application-package" value="com.lewa.launcher" />
	<property name="useragent" value="lewaHome" />
	<property name="version" value="1.02" />
	<!-- The intermediates directory -->
	<!-- Eclipse uses "bin" for its own output, so we do the same. -->
	<property name="outdir-bin" value="binswy" />
	<property name="outdir-gen" value="gen" />
	<!-- source directories -->

	<property name="basedir" value="." />
	<property name="asset-dir" value="assets" />
	<property name="srcdir" value="src" />
	<property name="srcdir-ospath" value="${basedir}/${srcdir}" />
	<property name="external-libs" value="${basedir}/lib" />
	<property name="external-libs-ospath" value="${external-libs}" />
	<property name="resource-dir" value="res" />
	<!-- dest directories -->
	<property name="des-resource-dir" value="${outdir-bin}/res" />
	<property name="des-asset-dir" value="${outdir-bin}/assets" />
	<property name="des-srcdir" value="${outdir-bin}/src" />
	<property name="des-srcdir-ospath" value="${basedir}/${outdir-bin}/${srcdir}" />
	<property name="des-external-libs" value="${outdir-bin}/libs" />
	<property name="des-external-libs-ospath" value="${basedir}/${outdir-bin}/${external-libs}" />

	<!-- Output directories -->
	<property name="outdir-classes" value="${outdir-bin}/javaclasses" />
	<property name="outdir-obfuscate-classes" value="${outdir-classes}" />
	<property name="outdir-obfuscate-classes-ospath" value="${basedir}/${outdir-obfuscate-classes}" />

	<!-- Intermediate files -->
	<property name="dex-file" value="classes.dex" />
	<property name="intermediate-dex" value="${outdir-bin}/${dex-file}" />
	<property name="intermediate-dex-ospath" value="${basedir}/${intermediate-dex}" />

	<!-- The final package file to generate -->
	<property name="resources-package" value="${outdir-bin}/${ant.project.name}" />
	<property name="resources-package-ospath" value="${basedir}/${resources-package}" />
	<property name="out-debug-package" value="${outdir-bin}/${ant.project.name}-debug.apk" />
	<property name="out-debug-package-ospath" value="${basedir}/${out-debug-package}" />
	<property name="out-unsigned-package" value="${outdir-bin}/${ant.project.name}-unsigned.apk" />
	<property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />
	<property name="out-signed-package" value="${useragent}\${ant.project.name}-signed-guarded.apk" />
	<property name="out-signed-package-ospath" value="${basedir}\${out-signed-package}" />


	<!-- init -->
	<target name="init">
		<echo>Creating all output directories </echo>

		<delete dir="${outdir-bin}" />
		<delete dir="${useragent}" />
		<delete dir="${outdir-classes}" />
		<delete dir="${outdir-obfuscate-classes}" />
		<mkdir dir="${outdir-bin}" />
		<mkdir dir="${outdir-classes}" />
		<mkdir dir="${useragent}" />
		<mkdir dir="${outdir-obfuscate-classes}" />

	</target>

	<!-- copy original strings and modify useragent -->
	<target name="copy" depends="init">
		<echo>copy files to output folder</echo>
		<!-- <delete file="${resource-dir}\values\strings.xml"/> <copy file="strings.xml" 
			todir="${resource-dir}\values" /> <replace file="${resource-dir}\values\strings.xml" 
			token="@USERAGENT@" value="${useragent}" encoding="utf-8"/> -->
	</target>

	<!-- Generate the R.java file for this project's resources. -->
	<target name="resource-src" depends="init">
		<echo>Generating R.java / Manifest.java from the resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-m" />
			<arg value="-J" />
			<arg value="${outdir-gen}" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
		</exec>
	</target>

	<!-- Generate java classes from .aidl files. -->
	<target name="aidl" depends="copy">
		<echo>Compiling aidl files into Java classes...</echo>
		<apply executable="${aidl}" failonerror="true">
			<arg value="-p${android-framework}" />
			<arg value="-I${srcdir}" />
			<fileset dir="${srcdir}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
	</target>

	<!-- Compile this project's .java files into .class files. -->
	<target name="compile" depends="copy, resource-src, aidl">
		<javac encoding="GBK" target="1.6" debug="true" extdirs="" deprecation="true" srcdir="." optimize="true"
destdir="${outdir-classes}" bootclasspath="frameworks_classes.jar">
			<classpath >
				<fileset dir="${external-libs}">  
				<include name="**/*.jar"/>  
				</fileset>
				<pathelement location="${android-jar}" />
			</classpath>
		</javac>
	</target>

	<target name="proguard" depends="compile">
		<taskdef resource="proguard/ant/task.properties" classpath="${proguardpath}/proguard.jar" />
		<proguard configuration="${basedir}/proguard.cfg" />
	</target>
<target name="dex-unguarded" depends="compile">
		<echo>Converting compiled files and external libraries into
			${outdir}/${dex-file}...</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">
			<arg value="--dex" />
			<arg value="--output=${intermediate-dex-ospath}" />
			<arg path="${outdir-classes}" />
			<fileset dir="${external-libs}" includes="*.jar" />

		</apply>
	</target>
	<!--
	<target name="jar" depends= "compile" description="打包成jar"> 
                <jar   jarfile= "${outdir-classes}/LWHjar.jar "   basedir= "${outdir-classes}"> 

                </jar> 
        </target> 
-->

	<!-- Convert this project's .class files into .dex files. -->
	<target name="dex" depends="proguard">
		<echo>Converting compiled files and external libraries into
			${outdir}/${dex-file}...</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">
			<arg value="--dex" />
			<arg value="--output=${intermediate-dex-ospath}" />
			<arg path="${outdir-bin}/classes-processed.jar" />
			<fileset dir="${external-libs}" includes="*.jar" />

		</apply>
	</target>

	<!-- Put the project's resources into the output package file. -->
	<target name="package-res-and-assets">
		<echo>Packaging resources and assets...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-A" />
			<arg value="${asset-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
		</exec>
	</target>

	<!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
	<target name="package-res-no-assets">
		<echo>Packaging resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<!-- No assets directory -->
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
		</exec>
	</target>

	<!-- Invoke the proper target depending on whether or not an assets directory 
		is present. -->
	<!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument only 
		when the assets dir exists. -->
	<target name="package-res">
		<available file="${asset-dir}" type="dir" property="res-target" value="and-assets" />
		<property name="res-target" value="no-assets" />
		<antcall target="package-res-${res-target}" />
	</target>

	<!-- Package the application and sign it with a debug key. This is the default 
		target when building. It is used for debug. 
	<target name="debug" depends="dex, package-res">
		<echo>Packaging ${out-debug-package}, and signing it with a debug
			key...</echo>
		<exec executable="${apk-builder}" failonerror="true">
			<arg value="${out-debug-package-ospath}" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${intermediate-dex-ospath}" />
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
			<arg value="-rj" />
			<arg value="${external-libs-ospath}" />
		</exec>
	</target>
	-->

	<!-- Package the application without signing it. This allows for the application 
		to be signed later with an official publishing key. -->
	<target name="package" depends="dex, package-res">
		<echo>Packaging ${out-unsigned-package} for release...</echo>
		<exec executable="${apk-builder}" failonerror="true">
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="-u" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${intermediate-dex-ospath}" />
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
			<arg value="-rj" />
			<arg value="${external-libs-ospath}" />
		</exec>
		<echo>It will need to be signed with jarsigner before being published.
		</echo>
	</target>

	<target name="jarsigner" depends="package">
		<echo>Packaging ${out-unsigned-package} for release...</echo>
		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-verbose" />
			<arg value="-keystore" />
			<!-- 私钥文件路径 -->
			<arg value="${keystore-path}" />
			<arg value="-storepass" />
			<!-- store 密码 -->
			<arg value="${store-pass}" />
			<arg value="-keypass" />
			<!-- key 密码 -->
			<arg value="${key-pass}" />

			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${out-unsigned-package-ospath}" />
			<!-- alais 别名 -->
			<arg value="${store-alias}" />
		</exec>
	</target>
	<target name="release-guarded" depends="jarsigner">


		<echo>release for release...</echo>
	</target>
<target name="release-unguarded" depends="dex-unguarded, package-res,package,jarsigner">
		<echo>release for release...</echo>
	</target>

	<!-- Install the package on the default emulator 
	<target name="install" depends="debug">
		<echo>Installing ${out-debug-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="${out-debug-package}" />
		</exec>
	</target>-->
	<!-- 
	<target name="reinstall" depends="debug">
		<echo>Installing ${out-debug-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="-r" />
			<arg value="${out-debug-package}" />
		</exec>
	</target>-->

	<!-- Uinstall the package from the default emulator -->
	<target name="uninstall">
		<echo>Uninstalling ${application-package} from the default emulator...
		</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="uninstall" />
			<arg value="${application-package}" />
		</exec>
	</target>

</project>

